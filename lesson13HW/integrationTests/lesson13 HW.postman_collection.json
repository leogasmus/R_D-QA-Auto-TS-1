{
	"info": {
		"_postman_id": "5bd1ca47-a0d3-4561-86d7-1caf9579fbf9",
		"name": "lesson13 HW",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "7229705"
	},
	"item": [
		{
			"name": "Upload new image",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", () => {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"pm.environment.set(\"imageId\", jsonData.id);\r",
							"pm.environment.set(\"imageUrl\", jsonData.url);\r",
							"\r",
							"pm.test(\"Image should upload\", () => {\r",
							"    pm.expect(jsonData).to.have.property(\"id\");\r",
							"    pm.expect(jsonData).to.have.property(\"url\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-api-key",
						"value": "{{YOUR-API-KEY}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"type": "file",
							"src": "/C:/Users/Kyrylo/Downloads/pCat.png"
						}
					]
				},
				"url": {
					"raw": "{{endpoint}}v1/images/upload",
					"host": [
						"{{endpoint}}v1"
					],
					"path": [
						"images",
						"upload"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get image by Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Uploaded image should be available\", () => {\r",
							"    pm.expect(jsonData.id).to.be.equal(pm.environment.get(\"imageId\"));\r",
							"});\r",
							"\r",
							"pm.test('Image should have url', () => {\r",
							"    pm.expect(jsonData.url).not.to.be.null\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-api-key",
						"value": "{{YOUR-API-KEY}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{endpoint}}v1/images/{{imageId}}",
					"host": [
						"{{endpoint}}v1"
					],
					"path": [
						"images",
						"{{imageId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Vote by imageId",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"pm.environment.set(\"voteId\", jsonData.id);\r",
							"\r",
							"pm.test(\"Vote registered successfully\", () => {\r",
							"    pm.expect(jsonData.message).to.be.equal(\"SUCCESS\");\r",
							"});\r",
							"\r",
							"pm.test(\"Image id should be equal previous id\", function () {\r",
							"     pm.expect(jsonData['image_id']).to.equal(pm.variables.get(\"imageId\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-api-key",
						"value": "{{YOUR-API-KEY}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"image_id\": \"{{imageId}}\",\r\n  \"value\": 1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{endpoint}}v1/votes",
					"host": [
						"{{endpoint}}v1"
					],
					"path": [
						"votes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get votes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"const imageId = pm.environment.get(\"imageId\");\r",
							"const votesByImage = jsonData.filter(vote => vote.image_id === imageId);\r",
							"const findVote = pm.environment.get(\"voteId\");\r",
							"const myVote = votesByImage.find(vote => vote.id === findVote)\r",
							"\r",
							"pm.test('VoteList have my vote', () => {\r",
							"    pm.expect(myVote).to.have.property('id')\r",
							"    pm.expect(myVote.id).to.equal(findVote)\r",
							"    pm.expect(myVote['image_id']).to.equal(imageId)\r",
							"})\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-api-key",
						"value": "{{YOUR-API-KEY}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{endpoint}}v1/votes",
					"host": [
						"{{endpoint}}v1"
					],
					"path": [
						"votes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add image to favourites",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"pm.test(\"Image should be added to favorites\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"id\");\r",
							"});\r",
							"\r",
							"pm.environment.set(\"favouriteId\", jsonData.id);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-api-key",
						"value": "{{YOUR-API-KEY}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"image_id\": \"{{imageId}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{endpoint}}v1/favourites",
					"host": [
						"{{endpoint}}v1"
					],
					"path": [
						"favourites"
					]
				}
			},
			"response": []
		},
		{
			"name": "Verify the image in favorites",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"let imageId = pm.environment.get(\"imageId\");\r",
							"let imageUrl = pm.environment.get(\"imageUrl\");\r",
							"\r",
							"const hasId = jsonData.some(el => el.image_id === imageId && el['image']['url'] === imageUrl);\r",
							"\r",
							"pm.test(`Image with id ${imageId} in favorites`, () => {\r",
							"    pm.expect(hasId).to.be.true;\r",
							"})\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-api-key",
						"value": "{{YOUR-API-KEY}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{endpoint}}v1/favourites",
					"host": [
						"{{endpoint}}v1"
					],
					"path": [
						"favourites"
					]
				}
			},
			"response": []
		}
	]
}